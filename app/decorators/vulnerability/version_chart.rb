# frozen_string_literal: true

class Vulnerability::VersionChart
  include ChartHelper

  SEVERITY_LEGEND_COLORS = { primary_blue_darker: '#3d7ea1',
                             primary_blue_primary: '#4c9ec9', 
                             primary_blue_80: '#70b1d4', 
                             primary_blue_60: '#94c5df' }.freeze 
 
  SEVERITY_LEGENDS = { high: [I18n.t('projects.vulnerabilities.severity.high'), SEVERITY_LEGEND_COLORS[:primary_blue_darker]],
                       medium: [I18n.t('projects.vulnerabilities.severity.medium'), SEVERITY_LEGEND_COLORS[:primary_blue_primary]],
                       low: [I18n.t('projects.vulnerabilities.severity.low'), SEVERITY_LEGEND_COLORS[:primary_blue_80]],
                       unknown_severity: [I18n.t('projects.vulnerabilities.unknown_severity'), SEVERITY_LEGEND_COLORS[:primary_blue_60]] }.freeze

  def initialize(release_history)
    @release_history = release_history
    @default_options = VULNERABILITY_VERSION_CHART_DEFAULTS.deep_dup
  end

  def data
    set_xaxis
    series.deep_merge(chart_watermark)
  end

  private

  def set_xaxis
    @default_options[:xAxis][:categories] = @release_history.map(&:version)
  end

  def series
    SEVERITY_LEGENDS.keys.each_with_index do |level, index|
      legend = SEVERITY_LEGENDS[level]
      @default_options[:series][index] = { name: legend[0], color: legend[1],
                                           data: vulnerabilities_count_by_severity(level.to_s) }
    end
    @default_options
  end

  def vulnerabilities_count_by_severity(level)
    @release_history.map { |r| r.attributes[level] }
  end
end
